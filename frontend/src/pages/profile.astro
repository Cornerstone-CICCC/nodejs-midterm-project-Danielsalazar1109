
---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
    <div class="container hidden">
      <h1>My Profile</h1>
      <button>Log Out</button>

      <form class="add-article">
        <input type="text" name="title" autocomplete="off" placeholder="Enter title">
        <textarea name="content" id="content" placeholder="Enter content"></textarea>
        <input type="checkbox" name="published" id="published" checked>
        <button type="submit">Create Article</button>
      </form>

      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Published</th>
          </tr>
        </thead>
        <tbody class="tbody-articles">
          <!-- ARTICLES SHOW UP HERE -->
        </tbody>
      </table>
    </div>

    <style>
      .hidden {
        display: none;
      }
    </style>

    <script>
      const container = document.querySelector('.container') as HTMLDivElement
      const logoutBtn = container.querySelector('button') as HTMLButtonElement
      const articleForm = container.querySelector('.add-article') as HTMLFormElement
      const tableBody = container.querySelector('.tbody-articles') as HTMLTableElement

      logoutBtn.addEventListener('click', async (): Promise<void> => {
        await fetch(`http://localhost:3500/users/logout`, {
          credentials: 'include'
        })
        window.location.href = "/"
      })

      const fetchArticles = async (): Promise<[]> => {
        const res = await fetch(`http://localhost:3500/articles`, {
          credentials: 'include'
        })
        const data = await res.json()
        return data
      }

      type Article = {
        id: string,
        title: string,
        content: string,
        published: boolean,
        userId: string
      }

      const buildList = async (): Promise<void> => {
        const articles: Article[] = await fetchArticles()
        tableBody.innerHTML = ""

        let tableContent = ''
        articles.forEach(article => {
          tableContent += `
            <tr>
              <td>${article.title}</td>
              <td>${article.content}</td>
              <td>${article.published ? 'Published' : 'Unpublished'}</td>
            </tr>
          `
        })
        tableBody.innerHTML = tableContent
      }

      articleForm.addEventListener('submit', async (e): Promise<void> => {
        e.preventDefault()
        const formData = new FormData(articleForm)
        const isChecked = formData.get('published') === "on" ? true : false
        const res = await fetch(`http://localhost:3500/articles/add`, {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          },
          credentials: 'include',
          body: JSON.stringify({
            title: formData.get('title'),
            content: formData.get('content'),
            published: isChecked
          })
        })
        const data = await res.json()
        buildList()
      })

      const loadProfile = async (): Promise<void> => {
        const res = await fetch(`http://localhost:3500/users/profile`, {
          credentials: 'include'
        })
        const data = await res.json()
        if (res.ok) {
          container.classList.remove('hidden')
          const title = container.querySelector('h1') as HTMLHeadingElement
          title.innerText = `${data.username.toUpperCase()}'s Profile`
          buildList()
        } else {
          window.location.href = "/"
        }
      }

      loadProfile()
    </script>
	</body>
</html>
